datastax-java-driver {

  basic.contact-points = [ "192.168.0.8:9042, 192.168.0.48:9042"]

  basic.session-keyspace = spark_demo

  # The policy that decides the "query plan" for each query; that is, which nodes to try as
  # coordinators, and in which order.
  #
  # Required: yes
  # Modifiable at runtime: no (but custom implementations may elect to watch configuration changes
  #   and allow child options to be changed at runtime).
  # Overridable in a profile: yes. Note that the driver creates as few instances as possible: if a
  #   named profile inherits from the default profile, or if two sibling profiles have the exact
  #   same configuration, they will share a single policy instance at runtime.
  #   If there are multiple load balancing policies in a single driver instance, they work together
  #   in the following way:
  #   - each request gets a query plan from its profile's policy (or the default policy if the
  #     request has no profile, or the profile does not override the policy).
  #   - when the policies assign distances to nodes, the driver uses the closest assigned distance
  #     for any given node.
  basic.load-balancing-policy {
    # The class of the policy. If it is not qualified, the driver assumes that it resides in the
    # package com.datastax.oss.driver.internal.core.loadbalancing.
    #
    # The driver provides a single implementation out of the box: DefaultLoadBalancingPolicy.
    #
    # You can also specify a custom class that implements LoadBalancingPolicy and has a public
    # constructor with two arguments: the DriverContext and a String representing the profile name.
    class = DefaultLoadBalancingPolicy

    # The datacenter that is considered "local": the default policy will only include nodes from
    # this datacenter in its query plans.
    #
    # This option can only be absent if you specified no contact points: in that case, the driver
    # defaults to 127.0.0.1:9042, and that node's datacenter is used as the local datacenter.
    #
    # As soon as you provide contact points (either through the configuration or through the cluster
    # builder), you must define the local datacenter explicitly, and initialization will fail if
    # this property is absent. In addition, all contact points should be from this datacenter;
    # warnings will be logged for nodes that are from a different one.
    #
    # This can also be specified programmatically with SessionBuilder.withLocalDatacenter. If both
    # are specified, the programmatic value takes precedence.
    // local-datacenter = datacenter1

    # A custom filter to include/exclude nodes.
    #
    # This option is not required; if present, it must be the fully-qualified name of a class that
    # implements `java.util.function.Predicate<Node>`, and has a public constructor taking a single
    # `DriverContext` argument.
    #
    # Alternatively, you can pass an instance of your filter to
    # CqlSession.builder().withNodeFilter(). In that case, this option will be ignored.
    #
    # The predicate's `test(Node)` method will be invoked each time the policy processes a
    # topology or state change: if it returns false, the node will be set at distance IGNORED
    # (meaning the driver won't ever connect to it), and never included in any query plan.
    // filter.class=
  }

  # ADVANCED OPTIONS -------------------------------------------------------------------------------

  # The component that handles authentication on each new connection.
  #
  # Required: no. If the 'class' child option is absent, no authentication will occur.
  # Modifiable at runtime: no
  # Overridable in a profile: no
  advanced.auth-provider {
    # The class of the provider. If it is not qualified, the driver assumes that it resides in the
    # package com.datastax.oss.driver.internal.core.auth.
    #
    # The driver provides a single implementation out of the box: PlainTextAuthProvider, that uses
    # plain-text credentials. It requires the `username` and `password` options below.
    #
    # You can also specify a custom class that implements AuthProvider and has a public
    # constructor with a DriverContext argument.
    class = PlainTextAuthProvider

    # Sample configuration for the plain-text provider:
    username = cassandra
    password = cassandra
  }


}